#!/usr/bin/env ruby
require File.join(File.dirname(__FILE__), '..', 'config', 'environment')
require 'logger'
@logger = Logger.new(RAILS_ROOT + "/log/update_podcasts.log")

if(ARGV[0])
  begin
    podcast = Podcast.find(ARGV[0])
    @logger.info "Getting episodes for #{podcast.title}"
    qf = podcast.queued_podcast || QueuedPodcast.create(:podcast_id => podcast.id, :url => podcast.url)
    PodcastProcessor.process(qf, @logger)
  rescue Exception => e
    @logger.fatal "There was a problem: #{e.message}"
  end
  exit
end

sleeptime = 4 * 60 * 60 # 4 hours

while true
  QueuedPodcast.synchronize_all # ensure each QP has a Podcast and each Pocast has a QP

  QueuedPodcast.parsed.each do |qf|
    begin
      @logger.info "Getting episodes for #{qf.podcast ? qf.podcast.title : qf.url}"
      PodcastProcessor.process(qf, @logger)
    rescue Exception => e
      @logger.fatal "There was a problem: #{e.message}"
    end
  end
  # Sleep N seconds until we refresh podcasts
  sleep sleeptime
  @logger.info "Sleeping #{sleeptime} seconds..."
end
