#!/usr/bin/env ruby

require File.join(File.dirname(__FILE__), '..', 'config', 'environment')

def parse_ffmpeg_info(raw_info)
  {
    :duration    => parse_duration(raw_info),
    :bitrate     => parse_bitrate(raw_info),
    :video_codec => parse_video_codec(raw_info),
    :audio_codec => parse_audio_codec(raw_info),
    :resolution  => [*parse_resolution(raw_info)],
    :file_format => parse_file_format(raw_info),
  }
end

def parse_duration(raw_info)
  if raw_info =~ /Duration: ([^:]*):([^:]*):([^,]*)/
    hours   = $1.to_i
    minutes = $2.to_i
    seconds = $3.to_f
 
    duration = hours * 60 * 60 + minutes * 60 + seconds
	end
rescue
  nil
end

def parse_file_format(raw_info)
  $1 if raw_info =~ /Input \#0, ([^,]*)/
end

def parse_resolution(raw_info)
  [$1, $2].map(&:to_i) if raw_info =~ /([\d]{3,4})x([\d]{3,4})/
end

def parse_bitrate(raw_info)
  $1.to_i if raw_info =~ /bitrate: ([^ ]*)/
rescue
  nil
end

def parse_video_codec(raw_info)
  $1 if raw_info =~ /Video: ([^,]*)/
rescue
  nil
end

def parse_audio_codec(raw_info)
  $1 if raw_info =~ /Audio: ([^,]*)/
rescue
  nil
end

while true
  begin
    # Sleep 30 minutes until a source is found
    sleep 30.minutes.to_i until source = Source.find_by_sha1hash(nil)

    tmp_file = "/tmp/source#{source.id}"

    # Download the file
    puts "Downloading"
    `curl -L '#{source.url.gsub("'", "")}' > #{tmp_file}`

    # Hash the file
    puts "Hashing"
    sha1hash = `sha1 #{tmp_file}`.strip

    # Get info about file
    puts "FFmpeg'ing"
    raw_info = `ffmpeg -i #{tmp_file} 2>&1`
    info = parse_ffmpeg_info(raw_info)

    puts "Got: #{info.inspect}"

    unless info[:video_codec].nil? || info[:duration].nil?
      # Get a screen shot
      puts "Screenshoting"
      time = info[:duration] / 3
      h = time / 60 * 60
      m = (time - h * 60 * 60) / 60
      s = time - h * 60 * 60 - m * 60

      `ffmpeg -y -i #{tmp_file} -vframes 1 -ss #{h}:#{m}:#{s} -an -vcodec png -f rawvideo #{tmp_file}_screenshot.png`

      source.attachment_for(:screenshot).assign(File.open("#{tmp_file}_screenshot.png"))
      source.save!

      # Create flv
      puts "FLV'ing"
      length            = "00:05:00"
      video_bitrate     = 512
      video_frame_rate  = 20
      audio_bitrate     = 96
      audio_sample_rate = 44100

      # Use fancy mathematics to keep videos from being stretched into 320x240
      width  = 320
      height = width.to_f/info[:resolution][0] * info[:resolution][1]
      size   = [width, height].join("x")

      options = { :i  => tmp_file,          :f  => :flv,
                  :ac => 1,                 :b  => "#{video_bitrate}k",
                  :r  => video_frame_rate,  :ab => "#{audio_bitrate}k",
                  :ar => audio_sample_rate, :t  => length,
                  :s  => size
                }.map {|k,v| ["-#{k}", v] }.flatten.join(" ")

      `ffmpeg #{options} #{tmp_file}.flv`
      if File.exists?("#{tmp_file}.flv")
        source.attachment_for(:preview).assign(File.open("#{tmp_file}.flv"))
        source.save!
      end
    end

    # Updates database with info taken from the video
    puts "Updating"
    source.episode.update_attributes(
      :duration => info[:duration]
    )
    source.feed.update_attributes(
			:format   => info[:file_format] || info[:video_codec] || info[:audio_codec],
      :bitrate  => info[:bitrate]
    )
    source.update_attributes(
      :format   => info[:file_format] || info[:video_codec] || info[:audio_codec],
      :sha1hash => sha1hash
    )
  ensure
    puts "Rm'ing\n"
    `rm #{tmp_file}*`
  end
end

